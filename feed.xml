<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://liukjx.github.io/</id><title>栗少</title><subtitle>最小闭环:学习,思考,记录,复习</subtitle> <updated>2022-12-13T08:15:43+08:00</updated> <author> <name>栗少</name> <uri>https://liukjx.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://liukjx.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="https://liukjx.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator> <rights> © 2022 栗少 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>第5节 归并排序及其相关面试题</title><link href="https://liukjx.github.io/posts/%E7%AC%AC5%E8%8A%82-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/" rel="alternate" type="text/html" title="第5节 归并排序及其相关面试题" /><published>2022-11-17T06:19:00+08:00</published> <updated>2022-12-13T08:12:13+08:00</updated> <id>https://liukjx.github.io/posts/%E7%AC%AC5%E8%8A%82-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id> <content src="https://liukjx.github.io/posts/%E7%AC%AC5%E8%8A%82-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%E5%8F%8A%E5%85%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/" /> <author> <name>栗少</name> </author> <category term="算法" /> <category term="左神体系班" /> <summary> 内容： 归并排序 题目： 归并排序的递归和非递归实现 在一个数组中，一个数左边比它小的数的总和，叫该数的小和 所有数的小和累加起来，叫数组小和 例子： [1,3,4,2,5] 1左边比1小的数：没有 3左边比3小的数：1 4左边比4小的数：1、3 2左边比2小的数：1 5左边比5小的数：1、3、4、 2 所以数组的小和为1+1+3+1+1+3+4+2=16 给定一个数组arr，求数组小和 在一个数组中，任何一个前面的数a，和任何一个后面的数b，如果(a,b)是降序的，就称为降序对 给定一个数组arr，求数组的降序对总数量 在一个数组中，对于任何一个数num，求有多少个(后面的数*2)依然&amp;lt;num，返回总个数 比如：[3,1,7,0,2] 3的后面有：1，0 1的后面有：0 7的后面有：0，2 0的后面没有 2的后面没有 所以总共有5个 归并排序 $T(N)=2... </summary> </entry> <entry><title>第4节 一些基础的数据结构</title><link href="https://liukjx.github.io/posts/%E7%AC%AC4%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" rel="alternate" type="text/html" title="第4节 一些基础的数据结构" /><published>2022-10-12T20:37:00+08:00</published> <updated>2022-11-17T06:24:26+08:00</updated> <id>https://liukjx.github.io/posts/%E7%AC%AC4%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id> <content src="https://liukjx.github.io/posts/%E7%AC%AC4%E8%8A%82-%E4%B8%80%E4%BA%9B%E5%9F%BA%E7%A1%80%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" /> <author> <name>栗少</name> </author> <category term="算法" /> <category term="左神体系班" /> <summary> 单链表、双链表 栈、队列 递归的物理实质 评估递归复杂度的Master公式 Master公式 形如 $T ( N ) = a * T (\frac{N}{b}) + O ( N ^ d )$ (abd都是常数) 如果$log_ba &amp;lt; d$复杂度为$O(N^d)$ 如果$log_ba &amp;gt; d$复杂度为$O(N^{log_ba})$ 如果$log_ba == d$复杂度为$O(N^d * logN)$ 谁大谁作为N的系数 a是分成几部分 N^d 是除递归外,剩余所有行为的时间复杂度 子问题规模是一致的,可以用Master公式 哈希表的使用和性能 如果是基础类型,会原样进入HashMap 如果是自定义类型,只会存引用信息,八字节 HashMap,有key和value,HashSet,理解为只有Key的HashMap 原生的类型,包装类,存HashMap... </summary> </entry> <entry><title>第2节 认识复杂度、对数器、二分法</title><link href="https://liukjx.github.io/posts/%E7%AC%AC2%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6-%E5%AF%B9%E6%95%B0%E5%99%A8-%E4%BA%8C%E5%88%86%E6%B3%95/" rel="alternate" type="text/html" title="第2节 认识复杂度、对数器、二分法" /><published>2022-10-09T21:22:00+08:00</published> <updated>2022-10-09T21:22:00+08:00</updated> <id>https://liukjx.github.io/posts/%E7%AC%AC2%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6-%E5%AF%B9%E6%95%B0%E5%99%A8-%E4%BA%8C%E5%88%86%E6%B3%95/</id> <content src="https://liukjx.github.io/posts/%E7%AC%AC2%E8%8A%82-%E8%AE%A4%E8%AF%86%E5%A4%8D%E6%9D%82%E5%BA%A6-%E5%AF%B9%E6%95%B0%E5%99%A8-%E4%BA%8C%E5%88%86%E6%B3%95/" /> <author> <name>栗少</name> </author> <category term="算法" /> <category term="左神体系班" /> <summary> 评估算法优劣的核心指标 时间复杂度、空间复杂度、估算方式、意义 常数时间的操作 选择排序、冒泡排序、插入排序 最优解 对数器 二分法 题目： 选择排序及其对数器验证 冒泡排序及其对数器验证 插入排序及其对数器验证 有序数组中找到num 有序数组中找到&amp;gt;=num最左的位置 有序数组中找到&amp;lt;=num最右的位置 局部最小值问题 定义何为局部最小值： arr[0] &amp;lt; arr[1]，0位置是局部最小； arr[N-1] &amp;lt; arr[N-2]，N-1位置是局部最小； arr[i-1] &amp;gt; arr[i] &amp;lt; arr[i+1]，i位置是局部最小； 给定一个数组arr，已知任何两个相邻的数都不相等，找到随便一个局部最小位置返回 </summary> </entry> <entry><title>第1节 算法和数据结构路线、注意点与常见问题</title><link href="https://liukjx.github.io/posts/%E7%AC%AC1%E8%8A%82-%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B7%AF%E7%BA%BF-%E6%B3%A8%E6%84%8F%E7%82%B9%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" rel="alternate" type="text/html" title="第1节 算法和数据结构路线、注意点与常见问题" /><published>2022-10-09T21:22:00+08:00</published> <updated>2022-10-09T21:22:00+08:00</updated> <id>https://liukjx.github.io/posts/%E7%AC%AC1%E8%8A%82-%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B7%AF%E7%BA%BF-%E6%B3%A8%E6%84%8F%E7%82%B9%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id> <content src="https://liukjx.github.io/posts/%E7%AC%AC1%E8%8A%82-%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%B7%AF%E7%BA%BF-%E6%B3%A8%E6%84%8F%E7%82%B9%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/" /> <author> <name>栗少</name> </author> <category term="算法" /> <category term="左神体系班" /> <summary> 算法和数据结构课程体系介绍 算法和数据结构学习路线 算法和数据结构学习方式推荐 算法和数据结构面试软技巧 同学们的各种答疑问题 </summary> </entry> <entry><title>第3节 异或运算相关面试题</title><link href="https://liukjx.github.io/posts/%E7%AC%AC3%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/" rel="alternate" type="text/html" title="第3节 异或运算相关面试题" /><published>2022-10-09T21:06:00+08:00</published> <updated>2022-10-09T21:06:00+08:00</updated> <id>https://liukjx.github.io/posts/%E7%AC%AC3%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/</id> <content src="https://liukjx.github.io/posts/%E7%AC%AC3%E8%8A%82-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%A2%98/" /> <author> <name>栗少</name> </author> <category term="算法" /> <category term="左神体系班" /> <summary> 内容： 异或运算的性质 异或运算的题目 题目： 不用额外变量交换两个数的值 不用额外变量交换数组中两个数的值 一个数组中有一种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这种数 怎么把一个int类型的数，提取出二进制中最右侧的1来 一个数组中有两种数出现了奇数次，其他数都出现了偶数次，怎么找到并打印这两种数 一个数组中有一种数出现K次，其他数都出现了M次， 已知M &amp;gt; 1，K &amp;lt; M，找到出现了K次的数 要求额外空间复杂度O(1)，时间复杂度O(N) </summary> </entry> </feed>
